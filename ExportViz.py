#!/usr/bin/env python3
#Author: Austin Smith - https://github.com/aws24689

#Import Dependencies
import pickle
import networkx as nx
from treelib import Node, Tree

class ExportViz:
    """Resize and Export Tree in GEXF Format For Vizualization in Gephi.

    Import tree generated by running WikiCrawl and prune it down according to
    parameters to get it below 10,000 nodes and export it as a .GEXF file to be
    visualized in Gephi.


    Parameters
    ----------
    tree_path : str
        The local path to the .pickle file generated by WikiCrawl

    Examples
    --------
	>>> exp = ExportViz('Data/b939c0ade3436e8945a03753d35722de39dfc84a-'+
	>>> 'a2212e0647d7bc34252dd05124c2d98b3e3120f8.pickle')
	>>>
	>>> exp.export_gexf(prune = True)
    
    """
    
    def __init__(self, tree_path):
        self.__path = tree_path
        self.__b = self.import_tree(path = self.__path)
        self._key = self.import_tree(path = self.__path[:-7]+'KEY.pickle')
        
        self._leaf_paths = self.__b.paths_to_leaves()
        self._tree_size = self.__b.size()
        self._start_name = self._key[self.__path.split('/')[-1][:-7].split('-')[0]]
        self._end_name = self._key[self.__path.split('/')[-1][:-7].split('-')[1]]
        
    def import_tree(self, path):
        """Import Pickled Tree"""
        with open(path, 'rb') as handle:
            return(pickle.load(handle))

    def export_gexf(self, prune = True, nearest_neighhbs = 1):
    	"""Prunes and exports the imported tree file. as a .GEXF

    	Prunes the tree down to nodes in the path and includes n
    	nearest neighbors.
        
        Parameters
        ----------
        prune : bool
        	True or False whether or not the tree should be trimmed.
        	default is True.
        nearest_neighbs : int
            The number of nearest neighbors to keep in the tree along
            the path. '1' will keep only the nodes directly in the path 
            along with each node directly connected to that path. Default
            is '1'.

        Returns
        -------
        file
            Saves data as .GEXF file.

        """
        if prune == False:
            #Create Networkx Graph
            G=nx.DiGraph()
            self._leaf_paths
            for j in range(len(self._leaf_paths)):
                for i in range(len(self._leaf_paths[j])):
                    try:
                        G.add_edge(self._leaf_paths[j][i],self._leaf_paths[j][i+1])
                    except:
                        break 
            #Output NetworkX Graph to GEXF file
            try:
                nx.write_gexf(G,self.__path[:-6]+'GEXF')
                print('Exported to "{}"'.format(self.__path[:-6]+'GEXF'))
            except:
                print('Export Failed!')
        
        if prune == True:
            #Create NetworkX Graph
            G=nx.DiGraph()
            self._leaf_paths
            for j in range(len(self._leaf_paths)):
                for i in range(len(self._leaf_paths[j])):
                    try:
                        G.add_edge(self._leaf_paths[j][i],self._leaf_paths[j][i+1])
                    except:
                        break
            
            #Create New Graph With Only Target Path and n nearest neigbors
            pathx = nx.shortest_path(G, source = 'https://en.wikipedia.org/wiki/'+self._start_name,
            target = 'https://en.wikipedia.org/wiki/'+self._end_name)
            D = nx.DiGraph()
            
            for p in pathx:
                for l in list(nx.single_source_shortest_path_length(G,source= p, cutoff= nearest_neighhbs).keys()):
                    D.add_edge(p[30:],l[30:])
            
            #Output NetworkX Graph to GEXF file
            try:
                nx.write_gexf(D,self.__path[:-6]+'GEXF')
                print('Exported to "{}"'.format(self.__path[:-6]+'GEXF'))
                print('{} to {}'.format(self._start_name,self._end_name))
                return(D)
            except:
                print('Export Failed!')
